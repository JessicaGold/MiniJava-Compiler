/*************/
/* Based on a template by Oren Ish-Shalom */
/*************/


/*************/
/* IMPORTS */
/*************/

import java_cup.runtime.*;
import ast.*;
import java.util.List;
import java.util.LinkedList;

parser code
{:
	public Lexer lexer;

	public Parser(Lexer lexer)
	{
		super(lexer);
		this.lexer = lexer;
	}

	// Override default error reporting in parser
	public void report_error(String message, Object info)
	{
	    System.err.print("Syntax error at line " + lexer.getLine() + " of input.\n");
		System.exit(1);
	}
:}

/************************/
/* CUSTOMIZE CUP PARSER */
/************************/
scan with
{:
	Symbol s;
    try {
	s = lexer.next_token();
	// System.out.print(s.sym);
	// System.out.print("[");
	// System.out.print(lexer.getLine());
	// System.out.print(":");
	// System.out.print(lexer.getCharPos());
	// System.out.print("] ");
	// System.out.print(sym.terminalNames[s.sym]);
	// if (s.value != null)
	// {
	//	System.out.print("( ");
	//	System.out.print(s.value);
	//	System.out.print(" )");
	// }
	// System.out.print("\n");
	return s;
     } catch (java.lang.Error e) {
         System.err.print("Syntax error at line " + lexer.getLine() + " of input.\n");
         System.exit(1);
         return null;
     }
:};

/*************/
/* TERMINALS */
/*************/

terminal AND;
terminal ASSIGN;
terminal BOOL_TYPE;
terminal CLASS;
terminal COMMA;
terminal DOT;
terminal ELSE;
terminal EXTENDS;
terminal FALSE;
terminal IF;
terminal INT_TYPE;
terminal LBRACE;
terminal LBRACKET;
terminal LENGTH;
terminal LPAREN;
terminal LT;
terminal MAIN;
terminal MINUS;
terminal MULT;
terminal NEW;
terminal NOT;
terminal OUT;
terminal PLUS;
terminal PUBLIC;
terminal RBRACE;
terminal RBRACKET;
terminal RETURN;
terminal RPAREN;
terminal SEMICOLON;
terminal STATIC;
terminal STRING;
terminal THIS;
terminal TRUE;
terminal VOID;
terminal WHILE;

/* tokens with values */
terminal String ID;
terminal Integer NUMBER;

/*****************/
/* NON TERMINALS */
/*****************/
non terminal Program Program;
non terminal AstType Type;
non terminal ClassDecl ClassDecl;
non terminal Expr Expr;
non terminal FormalArg FormalArg;
non terminal List<ClassDecl> ClassDeclList;
non terminal List<Expr> ExprList;
non terminal List<Expr> MethodCallParamsParens;
non terminal List<FormalArg> FormalArgsList;
non terminal List<FormalArg> FormalArgListParens;
non terminal List<MethodDecl> MethodDeclList;
non terminal List<Statement> StmtList;
non terminal List<VarDecl> VarDeclList;
non terminal MainClass MainClass;
non terminal MethodDecl MethodDecl;
non terminal Statement Statement;
non terminal VarDecl VarDecl;

/***********************/
/* OPERATOR PRECEDENCE */
/***********************/
precedence nonassoc ASSIGN;
precedence left AND;
precedence left LT;
precedence left PLUS, MINUS;
precedence left MULT;
precedence left LBRACKET, LPAREN;
precedence right NOT, NEW;
precedence right LBRACKET, LPAREN;
precedence left DOT;

/************************/
/* INITIAL NON TERMINAL */
/************************/
start with Program;

/********************/
/* PRODUCTION RULES */
/********************/

Program         ::=     MainClass:mainClass ClassDeclList:classDecls
                                                                      {: RESULT = new Program(mainClass, classDecls); :};

MainClass       ::=     CLASS ID:className LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID:argsName RPAREN LBRACE Statement:mainStmt RBRACE RBRACE
                                                                     {: RESULT = new MainClass(className, argsName, mainStmt); :};

ClassDecl       ::=     CLASS ID:className LBRACE VarDeclList:fieldDecls MethodDeclList:methodDecls RBRACE
                                                                     {: RESULT = new ClassDecl(className, null, fieldDecls, methodDecls); :}
                  |    CLASS ID:className EXTENDS ID:superName LBRACE VarDeclList:fieldDecls MethodDeclList: methodDecls RBRACE
                                                                     {: RESULT = new ClassDecl(className, superName, fieldDecls, methodDecls); :};

ClassDeclList   ::=   ClassDeclList:classDecls ClassDecl:decl        {: classDecls.add(decl); RESULT = classDecls; :}
                  |   /* empty list */                               {: RESULT = new LinkedList<ClassDecl>(); :};

VarDecl         ::=     Type:type ID:name SEMICOLON                  {: RESULT = new VarDecl(type, name, typeleft); :};

VarDeclList     ::=     VarDeclList:varDecls VarDecl:decl            {: varDecls.add(decl); RESULT = varDecls; :}
                  |     /* empty list  */                            {: RESULT = new LinkedList<VarDecl>(); :};

MethodDecl      ::=     PUBLIC:p Type:retType ID:name FormalArgListParens:formals LBRACE VarDeclList:varDecls StmtList:statements RETURN Expr:e SEMICOLON RBRACE
                                                                     {: RESULT = new MethodDecl(retType, name, formals, varDecls, statements, e, pleft); :};

MethodDeclList  ::=  MethodDecl:decl MethodDeclList:methodDecls     {: methodDecls.add(0, decl); RESULT = methodDecls; :}
                  |  /* empty list */                               {: RESULT = new LinkedList<MethodDecl>(); :};

FormalArg       ::=     Type:type ID:argName                         {: RESULT = new FormalArg(type, argName, typeleft); :};

FormalArgsList   ::=  FormalArg:formal                                 {: RESULT = new LinkedList<FormalArg>(); RESULT.add(formal); :}
                  |   FormalArg:head COMMA FormalArgsList:formals      {: formals.add(0, head); RESULT = formals; :};

FormalArgListParens ::= LPAREN RPAREN                                   {: RESULT = new LinkedList<FormalArg>(); :}
                      | LPAREN FormalArgsList:argList RPAREN            {: RESULT = argList; :};

Statement       ::=   LBRACE StmtList:stmtList RBRACE                  {: RESULT = new BlockStatement(stmtList); :}
                  |   IF LPAREN Expr:cond RPAREN Statement:thenCase ELSE Statement:elseCase
                                                                       {: RESULT = new IfStatement(cond, thenCase, elseCase); :}
                  |   WHILE LPAREN Expr:cond RPAREN Statement:body     {: RESULT = new WhileStatement(cond, body); :}
                  |   OUT LPAREN Expr:output RPAREN SEMICOLON          {: RESULT = new SysoutStatement(output); :}
                  |   ID:lv ASSIGN Expr:rv SEMICOLON                   {: RESULT = new AssignStatement(lv, rv); :}
                  |   ID:lv LBRACKET Expr:index RBRACKET ASSIGN Expr:rv SEMICOLON
                                                                       {: RESULT = new AssignArrayStatement(lv, index, rv); :};

StmtList        ::=   Statement:head StmtList:stmtList                  {: stmtList.add(0, head); RESULT = stmtList; :}
                  |   /* empty list  */                                {: RESULT = new LinkedList<Statement>(); :};

Expr            ::=   Expr:e1 AND Expr:e2                              {: RESULT = new AndExpr(e1, e2); :}
                  |   Expr:e1 PLUS Expr:e2                             {: RESULT = new AddExpr(e1, e2); :}
                  |   Expr:e1 MINUS Expr:e2                            {: RESULT = new SubtractExpr(e1, e2); :}
                  |   Expr:e1 MULT Expr:e2                             {: RESULT = new MultExpr(e1, e2); :}
                  |   Expr:e1 LT Expr:e2                               {: RESULT = new LtExpr(e1, e2); :}
                  |   Expr:array LBRACKET Expr:index RBRACKET          {: RESULT = new ArrayAccessExpr(array, index); :}
                  |   Expr:array DOT LENGTH                            {: RESULT = new ArrayLengthExpr(array); :}
                  |   Expr:owner DOT ID:methodId MethodCallParamsParens:params
                                                                       {: RESULT = new MethodCallExpr(owner, methodId, params); :}
                  |   NUMBER:num                                       {: RESULT = new IntegerLiteralExpr(num); :}
                  |   TRUE                                             {: RESULT = new TrueExpr(); :}
                  |   FALSE                                            {: RESULT = new FalseExpr(); :}
                  |   ID:id                                            {: RESULT = new IdentifierExpr(id); :}
                  |   THIS                                             {: RESULT = new ThisExpr(); :}
                  |   NEW INT_TYPE LBRACKET Expr:sizeExpr RBRACKET     {: RESULT = new NewIntArrayExpr(sizeExpr); :}
                  |   NEW ID:className LPAREN RPAREN                   {: RESULT = new NewObjectExpr(className); :}
                  |   NOT Expr:e                                       {: RESULT = new NotExpr(e); :}
                  |   LPAREN Expr:e RPAREN                             {: RESULT = e; :};

ExprList        ::=   Expr:e                                           {: RESULT = new LinkedList<Expr>(); RESULT.add(e); :}
                  |   Expr:head COMMA ExprList:exprList                {: exprList.add(0, head); RESULT = exprList; :};

MethodCallParamsParens ::=      LPAREN RPAREN                                   {: RESULT = new LinkedList<Expr>(); :}
                 |    LPAREN ExprList:exprList RPAREN                   {: RESULT = exprList; :};


Type            ::=     INT_TYPE                                          {: RESULT = new IntAstType(); :}
                  |     BOOL_TYPE                                           {: RESULT = new BoolAstType(); :}
                  |     ID:className                                        {: RESULT = new RefType(className); :}
                  |     INT_TYPE LBRACKET RBRACKET                        {: RESULT = new IntArrayAstType(); :};
